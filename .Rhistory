return(Theta_22)
}
sigma_X2 <- 1.0
beta_l <- c(0, 0, 1)
sigma_i2 <- c(1,1,1)
Theta_22 <- generate_Theta_22(sigma_X2,  beta_l, sigma_i2)
print(Theta_22)
### make theta22
generate_Theta_22 <- function(sigma_X2, beta_l, sigma_i2) {
p <- length(sigma_i2)
Theta_22 <- matrix(0, nrow = p, ncol = p)
# First row, first column element
Theta_22[1, 1] <- 1/sigma_X2 + sum(1/sigma_i2 * beta_l^2)
# First row, remaining elements
for (i in 2:p) {
Theta_22[1, i] <- -1/sigma_i2[i] * beta_l[i]
Theta_22[i, 1] <- -1/sigma_i2[i] * beta_l[i]
}
# Remaining elements
for (i in 2:p) {
Theta_22[i, i] <- -1/sigma_i2[i]
}
return(Theta_22)
}
sigma_X2 <- 1.0
beta_l <- c(0, 0, 1)
sigma_i2 <- c(1,1,1)
Theta_22 <- generate_Theta_22(sigma_X2,  beta_l, sigma_i2)
print(Theta_22)
### make theta22
generate_Theta_22 <- function(sigma_X2, beta_l, sigma_i2) {
p <- length(sigma_i2)+1
Theta_22 <- matrix(0, nrow = p, ncol = p)
# First row, first column element
Theta_22[1, 1] <- 1/sigma_X2 + sum(1/sigma_i2 * beta_l^2)
# First row, remaining elements
for (i in 2:p) {
Theta_22[1, i] <- -1/sigma_i2[i-1] * beta_l[i-1]
Theta_22[i, 1] <- -1/sigma_i2[i-1] * beta_l[i-1]
}
# Remaining elements
for (i in 2:p) {
Theta_22[i, i] <- -1/sigma_i2[i-1]
}
return(Theta_22)
}
sigma_X2 <- 1.0
beta_l <- c(0, 0, 1)
sigma_i2 <- c(1,1,1)
Theta_22 <- generate_Theta_22(sigma_X2,  beta_l, sigma_i2)
print(Theta_22)
solve(covmat)
1-1/sqrt(2)
mean(qnorm(x))
x = runif(100000)
mean(qnorm(x))
qnorm()
qnorm(1)
qnorm(0.5)
qnorm(0.9)
qnorm(0.99)
mean(qnorm(x)**2)
mean(qnorm(x))
mean(qnorm(x)**2)
x = runif(100000) * runif(100000)
mean(qnorm(x))
mean(qnorm(x)**2)
# Load required library
library(ggplot2)
# Define the line equation x + y = 1/2
x_values <- seq(0, 0.5, length.out = 100) # x values in the positive range
y_values <- 0.5 - x_values # corresponding y values
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the equation
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
labs(title = "Plot of x + y = 1/2", x = "x", y = "y") +
theme_minimal() +
xlim(0, 0.5) + ylim(0, 0.5) # Restrict the plot to the positive quadrant
# Define the line equation x + y = 1/2
x_values <- seq(0, 0.5, length.out = 100) # x values in the positive range
y_values <- 0.5 - x_values # corresponding y values
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the equation
ggplot(data, aes(x = a/d, y = y)) +
geom_line(color = "blue", size = 1) +
labs(title = "Plot of x + y = 1/2", x = "x", y = "y") +
theme_minimal() +
xlim(0, 0.5) + ylim(0, 0.5) # Restrict the plot to the positive quadrant
# Define the line equation x + y = 1/2
x_values <- seq(0, 0.5, length.out = 100) # x values in the positive range
y_values <- 0.5 - x_values # corresponding y values
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the equation
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
labs(title = "Plot of x + y = 1/2", x = "x", y = "y") +
theme_minimal() +
xlim(0, 0.5) + ylim(0, 0.5) # Restrict the plot to the positive quadrant
# Define the line equation x + y = 1/2
x_values <- seq(0, 0.5, length.out = 100) # x values in the positive range
y_values <- 0.5 - x_values # corresponding y values
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the equation
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
labs(
title = "Plot of x + y = 1/2",
x = expression(alpha / d),  # Rename x-axis
y = "y"
) +
theme_minimal() +
xlim(0, 0.5) + ylim(0, 0.5) # Restrict the plot to the positive quadrant
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the equation
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
labs(
title = "Plot of x + y = 1/2",
x = expression(alpha / d),  # Rename x-axis
y = expression(beta / d)
) +
theme_minimal() +
xlim(0, 0.5) + ylim(0, 0.5) # Restrict the plot to the positive quadrant
# Load required library
library(ggplot2)
# Define the first line: x + y = 1/2
x1_values <- seq(0, 0.5, length.out = 100) # x values for the first line
y1_values <- 0.5 - x1_values # corresponding y values
# Define the second curve: x/(2x+1) + y/(2y+1) = 1/2
# Solve for y numerically for each x
x2_values <- seq(0.01, 0.5, length.out = 100) # Avoid division by zero for x
y2_values <- sapply(x2_values, function(x) {
# Find y that satisfies x/(2x+1) + y/(2y+1) = 1/2
uniroot(function(y) x / (2 * x + 1) + y / (2 * y + 1) - 0.5, c(0.01, 0.5))$root
})
# Create data frames for both lines
data1 <- data.frame(x = x1_values, y = y1_values)
data2 <- data.frame(x = x2_values, y = y2_values)
# Load required library
library(ggplot2)
# Define the first line: x + y = 1/2
x1_values <- seq(0, 0.5, length.out = 100) # x values for the first line
y1_values <- 0.5 - x1_values # corresponding y values
# Define the second curve: x/(2x+1) + y/(2y+1) = 1/2
# Solve for y numerically for each x
x2_values <- seq(0.01, 0.5, length.out = 100) # Avoid division by zero for x
y2_values <- sapply(x2_values, function(x) {
# Find y that satisfies x/(2x+1) + y/(2y+1) = 1/2
uniroot(function(y) x / (2 * x + 1) + y / (2 * y + 1) - 0.5, c(0.01, 0.5))$root
})
# Define the second curve: x/(2x+1) + y/(2y+1) = 1/2
# Solve for y numerically for each x
x2_values <- seq(0.01, 0.49, length.out = 100) # Avoid division by zero for x
y2_values <- sapply(x2_values, function(x) {
# Find y that satisfies x/(2x+1) + y/(2y+1) = 1/2
uniroot(function(y) x / (2 * x + 1) + y / (2 * y + 1) - 0.5, c(0.01, 0.5))$root
})
# Load required library
library(ggplot2)
# Define the first line: x + y = 1/2
x1_values <- seq(0, 0.5, length.out = 100) # x values for the first line
y1_values <- 0.5 - x1_values # corresponding y values
# Define the second line: y = 1/(4x)
x3_values <- seq(0.01, 0.5, length.out = 100) # Avoid division by zero
y3_values <- 1 / (4 * x3_values) # corresponding y values
# Create data frames for both lines
data1 <- data.frame(x = x1_values, y = y1_values)
data3 <- data.frame(x = x3_values, y = y3_values)
# Plot the equations
ggplot() +
# First line: x + y = 1/2
geom_line(data = data1, aes(x = x, y = y), color = "blue", size = 1, linetype = "solid") +
# New curve: y = 1/(4x)
geom_line(data = data3, aes(x = x, y = y), color = "green", size = 1, linetype = "dotted") +
# Labels and theme
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = "y"
) +
theme_minimal() +
xlim(0, 0.5) + ylim(0, 1) # Adjust limits to fit the new curve
# Plot the equations
ggplot() +
# First line: x + y = 1/2
geom_line(data = data1, aes(x = x, y = y), color = "blue", size = 1, linetype = "solid") +
# New curve: y = 1/(4x)
geom_line(data = data3, aes(x = x, y = y), color = "green", size = 1, linetype = "dotted") +
# Labels and theme
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = expression(beta / d)
) +
theme_minimal() +
xlim(0, 5) + ylim(0, 5) # Adjust limits to fit the new curve
# Define the second line: y = 1/(4x)
x3_values <- seq(0.01, 5, length.out = 100) # Avoid division by zero
y3_values <- 1 / (4 * x3_values) # corresponding y values
# Create data frames for both lines
data1 <- data.frame(x = x1_values, y = y1_values)
data3 <- data.frame(x = x3_values, y = y3_values)
# Plot the equations
ggplot() +
# First line: x + y = 1/2
geom_line(data = data1, aes(x = x, y = y), color = "blue", size = 1, linetype = "solid") +
# New curve: y = 1/(4x)
geom_line(data = data3, aes(x = x, y = y), color = "green", size = 1, linetype = "dotted") +
# Labels and theme
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = expression(beta / d)
) +
theme_minimal() +
xlim(0, 5) + ylim(0, 5) # Adjust limits to fit the new curve
# Plot the equations
ggplot() +
# First line: x + y = 1/2
geom_line(data = data1, aes(x = x, y = y), color = "blue", size = 1, linetype = "solid") +
# New curve: y = 1/(4x)
geom_line(data = data3, aes(x = x, y = y), color = "red", size = 1, linetype = "dotted") +
# Labels and theme
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = expression(beta / d)
) +
theme_minimal() +
xlim(0, 5) + ylim(0, 5) # Adjust limits to fit the new curve
# Plot the equations
ggplot(combined_data, aes(x = x, y = y, color = Line, linetype = Line)) +
geom_line(size = 1) +
scale_color_manual(values = c("HighIF" = "blue", "1stIF" = "green")) +
scale_linetype_manual(values = c("HighIF" = "solid", "1stIF" = "dotted")) +
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = "y",
color = "Legend",
linetype = "Legend"
) +
theme_minimal() +
xlim(0, 5) + ylim(0, 5) # Adjust limits to fit the new curve
combined_data <- rbind(data1, data3)
# Plot the equations
ggplot(combined_data, aes(x = x, y = y, color = Line, linetype = Line)) +
geom_line(size = 1) +
scale_color_manual(values = c("HighIF" = "blue", "1stIF" = "green")) +
scale_linetype_manual(values = c("HighIF" = "solid", "1stIF" = "dotted")) +
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = "y",
color = "Legend",
linetype = "Legend"
) +
theme_minimal() +
xlim(0, 5) + ylim(0, 5) # Adjust limits to fit the new curve
# Combine data for easier plotting
combined_data <- rbind(data1, data3)
# Plot the equations with a legend
ggplot(combined_data, aes(x = x, y = y, color = Line, linetype = Line)) +
geom_line(size = 1) +
scale_color_manual(values = c("HighIF" = "blue", "1stIF" = "green")) +
scale_linetype_manual(values = c("HighIF" = "solid", "1stIF" = "dotted")) +
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = "y",
color = "Legend",
linetype = "Legend"
) +
xlim(0, 5) + ylim(0, 5) # Adjust limits to fit the new curve
rlang::last_trace()
# Load required library
library(ggplot2)
# Define the first line: x + y = 1/2
x1_values <- seq(0, 0.5, length.out = 100) # x values for the first line
y1_values <- 0.5 - x1_values # corresponding y values
# Define the second line: y = 1/(4x)
x3_values <- seq(0.01, 5, length.out = 100) # x values extended to 5
y3_values <- 1 / (4 * x3_values) # corresponding y values
# Create data frames with labels for legend
data1 <- data.frame(x = x1_values, y = y1_values, Line = "HighIF")
data3 <- data.frame(x = x3_values, y = y3_values, Line = "1stIF")
# Combine data for easier plotting
combined_data <- rbind(data1, data3)
# Plot the equations with a legend
ggplot(combined_data, aes(x = x, y = y, color = Line, linetype = Line)) +
geom_line(size = 1) +
scale_color_manual(values = c("HighIF" = "blue", "1stIF" = "green")) +
scale_linetype_manual(values = c("HighIF" = "solid", "1stIF" = "dotted")) +
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = "y",
color = "Legend",
linetype = "Legend"
) +
theme_minimal() +
xlim(0, 5) + ylim(0, 1) # Adjust limits to accommodate both lines
# Plot the equations with a legend
ggplot(combined_data, aes(x = x, y = y, color = Line, linetype = Line)) +
geom_line(size = 1) +
scale_color_manual(values = c("HighIF" = "blue", "1stIF" = "green")) +
scale_linetype_manual(values = c("HighIF" = "solid", "1stIF" = "dotted")) +
labs(
title = "Plots of x + y = 1/2 and y = 1/(4x)",
x = expression(alpha / d),
y = "y",
color = "Legend",
linetype = "Legend"
) +
theme_minimal() +
xlim(0, 5) + ylim(0, 5) # Adjust limits to accommodate both lines
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
source("~/Desktop/causal_inference/longitudinal/semi-parametric-semi-supervised/report/illustration.R", echo=TRUE)
install.packages("wavethresh")
install.packages("wavethresh")
library(wavethresh)
draw.default(filter.number=4, family="DaubExPhase", enhance=FALSE, main="D4 Mother", scaling.function = F) # mother wavelet
draw.default(filter.number=4, family="DaubExPhase", enhance=FALSE, main="D4 Father", scaling.function = T) # father wavelet
draw.default(filter.number=6, family="DaubExPhase", enhance=FALSE, main="D4 Father", scaling.function = T) # father wavelet
draw.default(filter.number=6, family="DaubExPhase", enhance=FALSE, main="D6 Father", scaling.function = T) # father wavelet
wv.mother <- draw(filter.number = filter.number, family = "DaubExPhase", resolution = 2^resolution, scaling.function = FALSE, plot.it = FALSE, enhance = FALSE)
filter.number = 5
resolution = 15
wv.mother <- draw(filter.number = filter.number, family = "DaubExPhase", resolution = 2^resolution, scaling.function = FALSE, plot.it = FALSE, enhance = FALSE)
draw.default(filter.number=6, family="DaubExPhase", enhance=FALSE, main="D6 Mother", scaling.function = F) # mother wavelet
wv.mother <- draw(filter.number = filter.number, family = "DaubExPhase", resolution = 2^resolution, scaling.function = FALSE, plot.it = FALSE, enhance = FALSE)
mv.mother["x"]
library(devtools)
install_github("siqixu/DaubechiesSim",ref="main")
library(devtools)
install_github("siqixu/DaubechiesSim",ref="main")
g
get()
getwd()
setwd()
setwd('Desktop/causal_inference/project_with_zhang/run')
### Real Data
data = load("lung_pathway_sel_lungcancerpathway.RData")
MSKCC = pathway.include_mskcc$KEGG_NON_SMALL_CELL_LUNG_CANCER
HLM = pathway.include_moff$KEGG_NON_SMALL_CELL_LUNG_CANCER
DFCI = pathway.include_cl$KEGG_NON_SMALL_CELL_LUNG_CANCER
dags = list()
run.K  = 3
run.n = round((nrow(MSKCC) + nrow(HLM) + nrow(DFCI))/3)
run.hardth = 0.01
criti.val_c = 0.01
run.tuning = 0.05
dags[[1]] = list(DAG_sample = MSKCC)
dags[[2]] = list(DAG_sample = HLM)
dags[[3]] = list(DAG_sample = DFCI)
source("DAGs_generate.R")
source("Integrative_learning.R")
source("evaluation.R")
library("EvaluationMeasures")
library("huge")
library(nimble)
library(parallel)
library(expm)
library(doParallel)
set.seed(5)
TLLiNGAM=function(K,dags,hardth,criti.val_c,tuning){
criti.val_c = criti.val_c
### Input:
### K number of datesets
### X n\times p sample matrix
### hardth hard threshold of regression
### criti.val critical value of independence test based on distance covariance
### criti.val_c the constant of c_0 as suggested below
### as suggested the critical value can be c_0 * 1/n^(1/2) * (1+ log max(p,n) / K)^{1/2}
origindags = dags
check=FALSE
n=nrow(dags[[1]]$DAG_sample)
p=ncol(dags[[1]]$DAG_sample)
K=length(dags)
A=matrix(0,p,2) # store the information of layer
A[,1]=1:p
colnames(A)=c("Node","Layer")
B = list()
for (k in 1:K) {
B[[k]] = matrix(0,p,p)
}
S=1:p
# Identify A_0 layer
### June 22nd
## My regression vector is a (p-1)*K dim vector
added.Reg.matrix = Compute.reg.matrix(dags,hardth,K,tuning)
dcov_pvalue = sapply(1:p,function(j) Compute.dcov_p(j,added.Reg.matrix[,j],dags,K))
node_S_select=S[dcov_pvalue > criti.val_c]
# if ((1 %in% node_S_select)) {
#   x = 1
# }
len_S = length(S)
if (length(node_S_select)==0){
check=TRUE
return(list(A=A,B=B,check=check))
}
S=S[-node_S_select]
for (k in 1:K) {
B[[k]][S,node_S_select] = -added.Reg.matrix[1:len_S + (k-1)*len_S,][S,node_S_select]
}
t=1
while(length(S)>1){
len_S=length(S)
#####
for (k in 1:K) {
dags[[k]]$DAG_sample = origindags[[k]]$DAG_sample[,S]
}
added.Reg.matrix = Compute.reg.matrix(dags,hardth,K,tuning)
dcov_pvalue=sapply(1:len_S, function(k) Compute.dcov_p(k,added.Reg.matrix[,k], dags, K))
node_S_select=S[dcov_pvalue > criti.val_c]
index_node_S_select=which(dcov_pvalue>criti.val_c)
if (length(node_S_select)==0){
node_S_select=S
A[node_S_select,2]=t
check=TRUE
return(list(A=A,B=B,check=check))
}
A[node_S_select,2]=t
S=setdiff(S,node_S_select)
index_S=setdiff(c(1:len_S),index_node_S_select)
if ( length(node_S_select)!=len_S ) {
for (k in 1:K) {
B[[k]][S,node_S_select] = -added.Reg.matrix[1:len_S + (k-1)*len_S,][index_S,index_node_S_select]
}
}
#   B[S,node_S_select]=stdPreciMat[index_S,index_node_S_select]
t=t+1
}
if (length(S)==1){
A[S,2]=t
}
sumB = matrix(0,p, p)
for (k in 1:K) {
sumB = sumB + abs(B[[k]])^2
}
index.B = (sqrt(sumB/K) < hardth)
for (k in 1:K) {
B[[k]][index.B]=0
}
#B=Parent.set.refit(X,B)
return(list(A=A,B=B,check=check))
}
estimated_adjace_tl=TLLiNGAM(run.K,dags, run.hardth, criti.val_c , run.tuning)
## Different weights
weight1 = estimated_adjace_tl$B[[1]][which(estimated_adjace_tl$B[[1]] != 0)]
weight2 = estimated_adjace_tl$B[[2]][which(estimated_adjace_tl$B[[2]] != 0)]
weight3 = estimated_adjace_tl$B[[3]][which(estimated_adjace_tl$B[[3]] != 0)]
g = graph_from_adjacency_matrix(estimated_adjace_tl$B[[1]], weighted = TRUE)
g
edgecount = apply(estimated_adjace_tl$B[[1]],1,function(x) sum(x==0))
edgecou1 = apply(estimated_adjace_tl$B[[1]],2,function(x) sum(x==0))
(edgecou1 == 37 & edgecount == 37)
1:37((edgecou1 == 37 & edgecount == 37))
1:37
(1:37)(edgecou1 == 37 & edgecount == 37)
(1:37)[(edgecou1 == 37 & edgecount == 37)]
colnames(HLM)[(edgecou1 == 37 & edgecount == 37)]
library(highDLingam)
setwd('/Users/mac/Desktop/causal_inference/longitudinal/project_with_zhang_revision/Final_code')
source("AdjMatrix_Final.r")
source("evaluation_Final.r")
source("MDLiNGAM_Final.r")
source("simulationGraph_Final.r")
dags = DAGs(run.n, run.p,run.example,run.K, run.pi)
true_adjacent = list()
run.n = 100
run.p = 100
run.K = 3
run.example = "hub_mini"
run.pi = 1
run.hardth = 0.5*(log(run.p)/run.n/run.K)^(1/2)
run.tuning = 3/run.K
criti.val_c = 0.12
run_simu(run.n, run.p, run.K, run.example, run.pi,run.hardth, run.tuning,criti.val_c)
dags = DAGs(run.n, run.p,run.example,run.K, run.pi)
run.pi = 3
run.hardth = 0.5*(log(run.p)/run.n/run.K)^(1/2)
run.tuning = 3/run.K
criti.val_c = 0.12
dags = DAGs(run.n, run.p,run.example,run.K, run.pi)
true_adjacent = list()
for (k in 1:run.K) {
true_adjacent[[k]] = dags[[k]]$true_Adjace
}
estimated_adjace_mdLiNGAM1=MDLiNGAM(X=dags[[1]]$DAG_sample,maxInDegree= 10*run.pi ,degree=10*run.pi,cutOffScaling=1)$estimated_adjace
install.packages("highDLingam_1.0.tar.gz", repos = NULL, type = "source")
result <- matrix(NA, nrow = iter, ncol = 4)
result <- matrix(NA, nrow =10, ncol = 4)
apply(result, 1, mean)
result <- matrix(NA, nrow = 4, ncol = iter)
result <- matrix(NA, nrow = 4, ncol = 10)
apply(result, 1, mean)
